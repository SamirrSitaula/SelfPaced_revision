import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.preprocessing import PolynomialFeatures
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import numpy as np

# Load the cleaned dataset (assuming it's already cleaned and saved in 'processed')
df = pd.read_csv('/Users/samirsitaula/Documents/Selfpaced_Practice/projects/customer_clv_churn/data/processed/cleaned_data.csv')

print(df.columns)

#Interaction terms(mmonthly charges and Tenure to capture how the cost and duration of the customers contract affect churn)
df['monthly_charges_tenure'] = df['MonthlyCharges'] * df['tenure']

#new features 'polynomila features generated by taking the existing features and raising them to a power or multiplying together,  to see non linear relationships

df['monthly_charges_squared'] = df['MonthlyCharges'] ** 2
df['total_charges_squared'] = df['TotalCharges'] ** 2

#categorical encoding(one hot encodings) to convert into numerical formats
df = pd.get_dummies(df, columns=['gender', 'Partner', 'Dependents', 'PhoneService', 'MultipleLines', 
                                 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 
                                 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 
                                 'PaperlessBilling', 'PaymentMethod'], drop_first=True)


#handling missing values
# Fill missing numerical columns with the median value
df['TotalCharges'] = df['TotalCharges'].replace(' ', np.nan)  # Replace empty strings with NaN
df['TotalCharges'] = df['TotalCharges'].astype(float)

#filled by median
df['TotalCharges'] = df['TotalCharges'].fillna(df['TotalCharges'].median())


# Fill missing categorical columns with the mode
df['SeniorCitizen'] = df['SeniorCitizen'].fillna(df['SeniorCitizen'].mode()[0])

print(df.columns.tolist())

#feature grouping to group related features for easy analysis
#grouping streaming services and streamingMovies into single feature
df['has_streaming_services'] = ((df['StreamingTV_Yes'] == 1) | (df['StreamingMovies_Yes'] == 1)).astype(int)


#grouping for online securities and device protections
df['has_online_security_or_protection'] = (
    (df['OnlineSecurity_Yes'] == 1) | (df['DeviceProtection_Yes'] == 1)
).astype(int)


#scaling features
#ensure that no single feature dominates due to scale differences
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df[['MonthlyCharges', 'TotalCharges', 'tenure']] = scaler.fit_transform(df[['MonthlyCharges', 'TotalCharges', 'tenure']])

#Feature Engineering for customer segmentation
#use target column to divide the dataset into churned and non-churned customers.
df['tenure_segment'] = pd.cut(df['tenure'], bins=[0, 12, 24, 36, 48, np.inf], labels=['0-1 year', '1-2 years', '2-3 years', '3-4 years', '4+ years'])

df['monthly_charge_segment'] = pd.cut(df['MonthlyCharges'], bins=[0, 30, 60, 90, np.inf], labels=['Low', 'Medium', 'High', 'Very High'])


#creating new target features for analysis
df['churn_contract'] = (df['Churn'] == 'Yes') & \
                       (df['Contract_One year'] == 0) & \
                       (df['Contract_Two year'] == 0)
df['churn_contract'] = df['churn_contract'].astype(int)



# #final Data Cleanup
# df.drop(columns=['StreamingTV', 'StreamingMovies', 'OnlineSecurity', 'DeviceProtection'], inplace=True)




